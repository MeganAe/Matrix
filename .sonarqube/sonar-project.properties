# Documentation reference: https://docs.sonarqube.org/latest/analysis/analysis-parameters/

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#                     IMPORTANT
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#This configuration file assumes that your scanner is launched from <source root>/.sonarqube
#Example: /projects/synapse/.sonarqube
#See sections "PROJECT BASE DIRECTORY" and "SCANNER WORKING DIRECTORY" to reconfigure
#!!!!!!!!!! ENSURE YOU CONFIGURE sonar.login AND sonar.analysis FOR PROPER INTEGRATION !!!!!!!!!!!!!!!!!

#Synapse SonarQube PROJECT scanning properties
#Conventions:
#1. Explicitly configure as many parameters as possible regardless of Sonarqube/Scanner default behavior
#2. Each analysis parameter has a default configuration respected by the maintainers
#3. The default configuration is provided as a comment above the parameter configuration
#Example:
##sonar.projectKey=synapse:develop
#sonar.projectKey=synapse:develop

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#               Deployment Specific Configurations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#PROJECT BASE DIRECTORY
# Intended to accomodate analysis of code outside of source directory (e.g. in a CI system)
# If analyzing outside of source tree set value of <target_directory>/.sonarqube
# Example: sonar.projectBaseDir=/home/jenkins/ftpdrop/cobol/synapse/.sonarqube
#sonar.projectBaseDir=..
sonar.projectBaseDir=..

#SCANNER WORKING DIRECTORY
#sonar.working.directory=./out
sonar.working.directory=./out

#SOURCE ENCODING
# Encoding of the source code. Default is default system encoding
#sonar.sourceEncoding=UTF-8

#SONARQUBE CREDENTIALS
#See https://docs.sonarqube.org/latest/user-guide/user-token/ for details
##How to Generate and use a token from Sonarqube:
##1. LOGIN and click the "Administration" tab at the top of the page (must have admin rights)
##2. Select Projects > Management from the Administration Page
##3. Click the Project Name (e.g. "Synapse") (or create a project by clicking "Create Project" from the same page)
##4. In the Project Management page, click "Generate a token" enter a unique name, and click "Generate"
##5. Paste the token value into sonar.login
##5.Example: sonar.login=aaa111bbb333
#sonar.login=

#WEBHOOK KEY (this is passed forward to your webhooks)
#          !!!!IMPORTANT FOR MAINTAINERS!!!!
#sonar.analysis.[yourkey]

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#               Language Configurations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#! Duplicate Code Detection Configurations
#Explanation from documentation: A piece of code is considered duplicated as soon as there are at least 100 duplicated tokens in a row (override with sonar.cpd.${language}.minimumTokens) spread across at least 10 lines of code (override with sonar.cpd.${language}.minimumLines). For Java projects, a piece of code is considered duplicated when there is a series of at least 10 statements in a row, regardless of the number of tokens and lines. This threshold cannot be overridden.

#No configurations provided by default (uses values integrated into SonarQube)

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#               Sonar Scanner Debug Configurations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#SCANNER LOG LEVEL
#Options: INFO,DEBUG,TRACE
#sonar.log.level=INFO
sonar.log.level=INFO

#VERBOSE CONFIG (server and client)
#Note: when 'sonar.verbose=true' this setting may expose sensitive information, such as credentials
#sonar.verbose=false
sonar.verbose=false

#SCANNER DEBUG DUMP
#This will trigger "simulation mode"
#sonar.scanner.dumpToFile=./out/scanner-debug.txt
#sonar.scanner.dumpToFile=./out/scanner-debug.txt

#SCANNER METADATA FILE PATH (outputs build information)
#Default behavior uses the value of sonar.working.directory
#DEFAULT IS TO NOT DECLARE THIS PARAMETER
#sonar.scanner.metadataFilePath=./out

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#               Project Configurations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#!SonarQube Project Identification Configurations

#PROJECT KEY for tracking in SonarQube (must be unique in a given SonarQube instance)
#sonar.projectKey=synapse:develop
sonar.projectKey=synapse:develop

#PROJECT HOMEPAGE
#sonar.links.homepage=https://github.com/matrix-org/synapse
sonar.links.homepage=https://github.com/matrix-org/synapse

#PROJECT DESCRIPTION
#sonar.projectDescription='Synapse Matrix Server'
sonar.projectDescription='Synapse Matrix Server'

#PROJECT NAME (defaults to project key)
#sonar.projectName='Synapse Development Branch'
sonar.projectName='Synapse Development Branch'

#PROJECT VERSION (defaults to 'not provided')
#Example: sonar.projectVersion=1.0
#DEFAULT IS TO NOT DECLARE THIS PARAMETER

#PROJECT DATE (defaults to Current System Time)
#format is yyyy-MM-dd 
#Example: sonar.projectDate=2020-07-29
#DEFAULT IS TO NOT DECLARE THIS PARAMETER

#!File Path Configurations
#Path is relative to the sonar-project.properties file. Defaults to .

#SOURCE FILE LOCATIONS
#sonar.sources=debian,docker,scripts-dev,scripts,snap,stubs,synapse
sonar.sources=debian,docker,scripts-dev,scripts,snap,stubs,synapse

#TEST FILE LOCATIONS
#These are Test Source Files, not Test Reports
#sonar.tests=tests
sonar.tests=tests

#!Build Configuration

#BLAME CONFIGURATION
#Default is to force blame to ensure tired coders don't keep working off of stale information
#sonar.scm.forceReloadAll=true
sonar.scm.forceReloadAll=true

#BUILD STRING ID (a build string to make your build identifiable in SonarQube searches
#Default uses 'DevBuild' which will overwrite prior builds using the default configuration
#sonar.buildString='DevBuild'
sonar.buildString='DevBuild'

#SCM REVISION ID (configuring this will override the revision information from the SCM)
#sonar.scm.revision=Build0Release0
#DEFAULT IS TO NOT DECLARE THIS PARAMETER

#!Issue Report Generation and Tracking

#EXTERNAL ISSUE REPORT PATH
#Configured issue reports to output to ./out/issue-reports (which is listed in the .gitignore)
#sonar.externalIssueReportPaths=./out/issue-reports
sonar.externalIssueReportPaths=./out/issue-reports

#ISSUE TRACKING LINK
#sonar.links.issue=https://github.com/matrix-org/synapse/issues
sonar.links.issue=https://github.com/matrix-org/synapse/issues

#! Continuous Integration Configurations

#CONTINUOUS INTEGRATION LINK
#sonar.links.ci=https://your.ci/system

#!SCM configuration (see documentation reference for explanation)

#SCM PROVIDER (svn, git, tfvc,etc)
#sonar.scm.provider=git
sonar.scm.provider=git

#SCM EXCLUSIONS CONFIGURATION (set to 'true' to ignore exclusions configured in SCM)
#Default is to respect .gitignore but allow configuration.
#sonar.scm.disabled=false
#sonar.scm.exclusions.disabled=false
sonar.scm.disabled=false
sonar.scm.exclusions.disabled=false

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#               Test Coverage Configurations
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#JAVASCRIPT
##Test Coverage
###sonar.javascript.lcov.reportPaths=./out/tests
sonar.javascript.lcov.reportPaths=./out/tests
##Test Execution
###Use jest-sonar-reporter or karma-sonarqube-unit-reporter from npm to generate tests

#PYTHON
##Test Coverage
###sonar.python.coverage.reportPaths=./out/tests/coverage-reports/*coverage-*.xml
sonar.python.coverage.reportPaths=./out/tests/coverage-reports/*coverage-*.xml
##Test Execution
###NOTE: if any report paths are invalid set sonar.python.xunit.skipDetails=true to collect only project-level details
###sonar.python.xunit.reportPath=./out/tests/xunit-reports/xunit-result-*.xmlsonar.python.xunit.reportPath
sonar.python.xunit.reportPath=./out/tests/xunit-reports/xunit-result-*.xmlsonar.python.xunit.reportPath