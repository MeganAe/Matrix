stages:
  - lint
  - test
  - build

lint:
  stage: lint
  image:
    name: $CI_REGISTRY_IMAGE:latest
    entrypoint: [""]
  before_script:
    - apt-get update
    - apt-get install -yqq git
    - pip install poetry
    - poetry install
  script:
    - poetry run isort --check synapse
    - poetry run black --check synapse
    - poetry run mypy

test-trial:
  stage: test
  image:
    name: $CI_REGISTRY_IMAGE:latest
    entrypoint: [""]
  before_script:
    - pip install -e ".[all]"
  script:
    - trial -j 4 tests

test-sytest:
  stage: test
  image:
    name: matrixdotorg/sytest-synapse:buster
    entrypoint: [""]
  script:
    - cp -r . /src
    - /bootstrap.sh synapse

test-complement:
  stage: test
  image: golang:1.18-buster
  only:
    - test-complement
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - echo "deb http://deb.debian.org/debian buster-backports main" > /etc/apt/sources.list.d/complement.list
    - apt-get update
    - apt-get install -yqq wget libolm3 libolm-dev/buster-backports
    - wget -O docker-cli.deb https://download.docker.com/linux/debian/dists/buster/pool/stable/amd64/docker-ce-cli_20.10.9~3-0~debian-buster_amd64.deb
    - dpkg -i docker-cli.deb
  script:
    - scripts-dev/complement.sh

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if [ $CI_COMMIT_BRANCH == "master" ]; then tag=$(cat pyproject.toml | grep -E "^version =" | sed -E 's/^version = "(.+)"$/\1/'); fi
    - if [ $CI_COMMIT_BRANCH != "master" ]; then tag=$CI_COMMIT_BRANCH; fi
    - docker build --tag $CI_REGISTRY_IMAGE:$tag-$CI_COMMIT_SHA -f docker/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$tag-$CI_COMMIT_SHA
    - if [ $CI_COMMIT_BRANCH == "master" ]; then
        docker tag $CI_REGISTRY_IMAGE:$tag-$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest;
        docker push $CI_REGISTRY_IMAGE:latest;
      fi

build-pyston:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_BUILDKIT: 1
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if [ $CI_COMMIT_BRANCH == "master" ]; then tag=$(cat pyproject.toml | grep -E "^version =" | sed -E 's/^version = "(.+)"$/\1/'); fi
    - if [ $CI_COMMIT_BRANCH != "master" ]; then tag=$CI_COMMIT_BRANCH; fi
    - docker build --tag $CI_REGISTRY_IMAGE:$tag-$CI_COMMIT_SHA-pyston --build-arg BASE_IMAGE=pyston/slim:2.3.3 -f docker/Dockerfile-custom-base .
    - docker push $CI_REGISTRY_IMAGE:$tag-$CI_COMMIT_SHA-pyston
